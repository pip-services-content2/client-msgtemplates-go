// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: protos/msgtemplates_v1.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessageTemplatesClient is the client API for MessageTemplates service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageTemplatesClient interface {
	GetTemplates(ctx context.Context, in *MessageTemplatePageRequest, opts ...grpc.CallOption) (*MessageTemplatePageReply, error)
	GetTemplateById(ctx context.Context, in *MessageTemplateIdRequest, opts ...grpc.CallOption) (*MessageTemplateObjectReply, error)
	GetTemplateByIdOrName(ctx context.Context, in *MessageTemplateNameRequest, opts ...grpc.CallOption) (*MessageTemplateObjectReply, error)
	CreateTemplate(ctx context.Context, in *MessageTemplateObjectRequest, opts ...grpc.CallOption) (*MessageTemplateObjectReply, error)
	UpdateTemplate(ctx context.Context, in *MessageTemplateObjectRequest, opts ...grpc.CallOption) (*MessageTemplateObjectReply, error)
	DeleteTemplateById(ctx context.Context, in *MessageTemplateIdRequest, opts ...grpc.CallOption) (*MessageTemplateObjectReply, error)
}

type messageTemplatesClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageTemplatesClient(cc grpc.ClientConnInterface) MessageTemplatesClient {
	return &messageTemplatesClient{cc}
}

func (c *messageTemplatesClient) GetTemplates(ctx context.Context, in *MessageTemplatePageRequest, opts ...grpc.CallOption) (*MessageTemplatePageReply, error) {
	out := new(MessageTemplatePageReply)
	err := c.cc.Invoke(ctx, "/msgtemplates_v1.MessageTemplates/get_templates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageTemplatesClient) GetTemplateById(ctx context.Context, in *MessageTemplateIdRequest, opts ...grpc.CallOption) (*MessageTemplateObjectReply, error) {
	out := new(MessageTemplateObjectReply)
	err := c.cc.Invoke(ctx, "/msgtemplates_v1.MessageTemplates/get_template_by_id", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageTemplatesClient) GetTemplateByIdOrName(ctx context.Context, in *MessageTemplateNameRequest, opts ...grpc.CallOption) (*MessageTemplateObjectReply, error) {
	out := new(MessageTemplateObjectReply)
	err := c.cc.Invoke(ctx, "/msgtemplates_v1.MessageTemplates/get_template_by_id_or_name", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageTemplatesClient) CreateTemplate(ctx context.Context, in *MessageTemplateObjectRequest, opts ...grpc.CallOption) (*MessageTemplateObjectReply, error) {
	out := new(MessageTemplateObjectReply)
	err := c.cc.Invoke(ctx, "/msgtemplates_v1.MessageTemplates/create_template", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageTemplatesClient) UpdateTemplate(ctx context.Context, in *MessageTemplateObjectRequest, opts ...grpc.CallOption) (*MessageTemplateObjectReply, error) {
	out := new(MessageTemplateObjectReply)
	err := c.cc.Invoke(ctx, "/msgtemplates_v1.MessageTemplates/update_template", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageTemplatesClient) DeleteTemplateById(ctx context.Context, in *MessageTemplateIdRequest, opts ...grpc.CallOption) (*MessageTemplateObjectReply, error) {
	out := new(MessageTemplateObjectReply)
	err := c.cc.Invoke(ctx, "/msgtemplates_v1.MessageTemplates/delete_template_by_id", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageTemplatesServer is the server API for MessageTemplates service.
// All implementations must embed UnimplementedMessageTemplatesServer
// for forward compatibility
type MessageTemplatesServer interface {
	GetTemplates(context.Context, *MessageTemplatePageRequest) (*MessageTemplatePageReply, error)
	GetTemplateById(context.Context, *MessageTemplateIdRequest) (*MessageTemplateObjectReply, error)
	GetTemplateByIdOrName(context.Context, *MessageTemplateNameRequest) (*MessageTemplateObjectReply, error)
	CreateTemplate(context.Context, *MessageTemplateObjectRequest) (*MessageTemplateObjectReply, error)
	UpdateTemplate(context.Context, *MessageTemplateObjectRequest) (*MessageTemplateObjectReply, error)
	DeleteTemplateById(context.Context, *MessageTemplateIdRequest) (*MessageTemplateObjectReply, error)
	mustEmbedUnimplementedMessageTemplatesServer()
}

// UnimplementedMessageTemplatesServer must be embedded to have forward compatible implementations.
type UnimplementedMessageTemplatesServer struct {
}

func (UnimplementedMessageTemplatesServer) GetTemplates(context.Context, *MessageTemplatePageRequest) (*MessageTemplatePageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplates not implemented")
}
func (UnimplementedMessageTemplatesServer) GetTemplateById(context.Context, *MessageTemplateIdRequest) (*MessageTemplateObjectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplateById not implemented")
}
func (UnimplementedMessageTemplatesServer) GetTemplateByIdOrName(context.Context, *MessageTemplateNameRequest) (*MessageTemplateObjectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplateByIdOrName not implemented")
}
func (UnimplementedMessageTemplatesServer) CreateTemplate(context.Context, *MessageTemplateObjectRequest) (*MessageTemplateObjectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTemplate not implemented")
}
func (UnimplementedMessageTemplatesServer) UpdateTemplate(context.Context, *MessageTemplateObjectRequest) (*MessageTemplateObjectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTemplate not implemented")
}
func (UnimplementedMessageTemplatesServer) DeleteTemplateById(context.Context, *MessageTemplateIdRequest) (*MessageTemplateObjectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemplateById not implemented")
}
func (UnimplementedMessageTemplatesServer) mustEmbedUnimplementedMessageTemplatesServer() {}

// UnsafeMessageTemplatesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageTemplatesServer will
// result in compilation errors.
type UnsafeMessageTemplatesServer interface {
	mustEmbedUnimplementedMessageTemplatesServer()
}

func RegisterMessageTemplatesServer(s grpc.ServiceRegistrar, srv MessageTemplatesServer) {
	s.RegisterService(&MessageTemplates_ServiceDesc, srv)
}

func _MessageTemplates_GetTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageTemplatePageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageTemplatesServer).GetTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msgtemplates_v1.MessageTemplates/get_templates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageTemplatesServer).GetTemplates(ctx, req.(*MessageTemplatePageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageTemplates_GetTemplateById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageTemplateIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageTemplatesServer).GetTemplateById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msgtemplates_v1.MessageTemplates/get_template_by_id",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageTemplatesServer).GetTemplateById(ctx, req.(*MessageTemplateIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageTemplates_GetTemplateByIdOrName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageTemplateNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageTemplatesServer).GetTemplateByIdOrName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msgtemplates_v1.MessageTemplates/get_template_by_id_or_name",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageTemplatesServer).GetTemplateByIdOrName(ctx, req.(*MessageTemplateNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageTemplates_CreateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageTemplateObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageTemplatesServer).CreateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msgtemplates_v1.MessageTemplates/create_template",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageTemplatesServer).CreateTemplate(ctx, req.(*MessageTemplateObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageTemplates_UpdateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageTemplateObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageTemplatesServer).UpdateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msgtemplates_v1.MessageTemplates/update_template",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageTemplatesServer).UpdateTemplate(ctx, req.(*MessageTemplateObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageTemplates_DeleteTemplateById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageTemplateIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageTemplatesServer).DeleteTemplateById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msgtemplates_v1.MessageTemplates/delete_template_by_id",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageTemplatesServer).DeleteTemplateById(ctx, req.(*MessageTemplateIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageTemplates_ServiceDesc is the grpc.ServiceDesc for MessageTemplates service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageTemplates_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "msgtemplates_v1.MessageTemplates",
	HandlerType: (*MessageTemplatesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get_templates",
			Handler:    _MessageTemplates_GetTemplates_Handler,
		},
		{
			MethodName: "get_template_by_id",
			Handler:    _MessageTemplates_GetTemplateById_Handler,
		},
		{
			MethodName: "get_template_by_id_or_name",
			Handler:    _MessageTemplates_GetTemplateByIdOrName_Handler,
		},
		{
			MethodName: "create_template",
			Handler:    _MessageTemplates_CreateTemplate_Handler,
		},
		{
			MethodName: "update_template",
			Handler:    _MessageTemplates_UpdateTemplate_Handler,
		},
		{
			MethodName: "delete_template_by_id",
			Handler:    _MessageTemplates_DeleteTemplateById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/msgtemplates_v1.proto",
}
